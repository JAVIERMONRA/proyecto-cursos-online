import React, { createContext, useState, useEffect, ReactNode } from "react";

/**
 * Contexto de Autenticaci√≥n (AuthContext)
 * 
 * Este contexto centraliza la gesti√≥n del estado de autenticaci√≥n en la aplicaci√≥n.
 * Permite compartir la informaci√≥n del usuario (rol, sesi√≥n activa) entre componentes.
 * 
 * Funcionalidades principales:
 * üîπ `login(token, rol)` ‚Äî Guarda el token y rol en `localStorage` y actualiza el estado global.  
 * üîπ `logout()` ‚Äî Elimina los datos de sesi√≥n del almacenamiento local y limpia el estado.  
 * üîπ Se inicializa verificando si ya existe una sesi√≥n previa almacenada.  
 */

interface User {
  rol: string;
}

interface AuthContextType {
  user: User | null;
  login: (token: string, rol: string) => void;
  logout: () => void;
}

// Contexto por defecto (sin sesi√≥n)
export const AuthContext = createContext<AuthContextType>({
  user: null,
  login: () => {},
  logout: () => {},
});

// Proveedor de autenticaci√≥n
export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);

  // üîπ Verifica sesi√≥n almacenada en localStorage
  useEffect(() => {
    const token = localStorage.getItem("token");
    const rol = localStorage.getItem("rol");
    if (token && rol) setUser({ rol });
  }, []);

  // üîπ Inicia sesi√≥n y almacena datos
  const login = (token: string, rol: string) => {
    localStorage.setItem("token", token);
    localStorage.setItem("rol", rol);
    setUser({ rol });
  };

  // üîπ Cierra sesi√≥n y limpia almacenamiento
  const logout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("rol");
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};
